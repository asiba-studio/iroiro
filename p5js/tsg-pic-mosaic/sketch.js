

let img;
let mosaicShader;
let isHovered = false;
let wasHovered = false;
let hoverEndTime = 0;
let defaultImageUrl = '';
let virtualHeight = 1500;

// studioÁî®ÁîªÂÉèË™øÊï¥
let imageAspect;
let displayWidth, displayHeight;
let tilesY;
let actualCanvasHeight;


// Verex shader
const vert = `
attribute vec3 aPosition;
attribute vec2 aTexCoord;

varying vec2 vTexCoord;

void main() {
  vTexCoord = aTexCoord;
  vec4 positionVec4 = vec4(aPosition, 1.0);
  positionVec4.xy = positionVec4.xy * 2.0 - 1.0;
  gl_Position = positionVec4;
}
`;

// Fragment shader
const frag = `
precision mediump float;

uniform sampler2D u_texture;
uniform vec2 u_resolution;
uniform float uMosaicIntensity;
uniform bool u_isHovered;
uniform float u_tileY;
uniform float u_time;
uniform float u_hoverEndTime;
varying vec2 vTexCoord;

float random(vec2 st) {
    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);
}


vec4 mosaic(sampler2D tex, vec2 uv, float intensity) {
	if (intensity <= 0.0) {
			return texture2D(tex, uv);
	}

	vec2 mosaicSize = vec2(intensity);
	vec2 coord = floor(uv * u_resolution / mosaicSize) * mosaicSize / u_resolution;
	return texture2D(tex, coord);
}

void main() {
  vec2 uv = vTexCoord;
	uv.y = 1.0 - uv.y;
	
	// Á∏¶ÊñπÂêë„ÅÆ„Çø„Ç§„É™„É≥„Ç∞Âá¶ÁêÜ
	uv.y = mod(uv.y * u_tileY, 1.0);
  
  if (u_isHovered) {
    // „Éõ„Éê„ÉºÊôÇ„ÅØ„É¢„Ç∂„Ç§„ÇØ„Å™„Åó
    gl_FragColor = texture2D(u_texture, uv);
    return;
  }
  
  // 3ÊÆµÈöé„ÅÆ„É¢„Ç∂„Ç§„ÇØÂº∑Â∫¶„ÇíË®àÁÆó
  float x = uv.x;
  float baseIntensity;
  
  if (x < 0.33) {
    // Â∑¶ÂÅ¥: Âº∑„ÅÑ„É¢„Ç∂„Ç§„ÇØ
    baseIntensity = 20.0;
  } else if (x < 0.66) {
    // ‰∏≠Â§Æ: ‰∏≠Á®ãÂ∫¶„ÅÆ„É¢„Ç∂„Ç§„ÇØ
    baseIntensity = 10.0;
  } else {
    // Âè≥ÂÅ¥: Âº±„ÅÑ„É¢„Ç∂„Ç§„ÇØ
    baseIntensity = 0.1;
  }

  float finalIntensity = baseIntensity;

  // „Éõ„Éê„ÉºÁµÇ‰∫ÜÂæå„ÅÆÂæ©ÂÖÉ„Ç®„Éï„Çß„ÇØ„Éà
  if (!u_isHovered && u_hoverEndTime > 0.0) {
      float timeSinceHoverEnd = u_time - u_hoverEndTime;
      
      // „Éî„ÇØ„Çª„É´„Åî„Å®„ÅÆ„É©„É≥„ÉÄ„É†„Å™ÈÅÖÂª∂ÊôÇÈñìÔºà0.0„Äú2.0ÁßíÔºâ
      float pixelSeed = random(gl_FragCoord.xy * 0.01);
      float delayTime = pixelSeed * 2.0;
      
      // Âæ©ÂÖÉ„Å´„Åã„Åã„ÇãÊôÇÈñìÔºà0.5„Äú1.5ÁßíÔºâ
      float restoreTime = 0.5 + pixelSeed * 1.0;
      
      if (timeSinceHoverEnd > delayTime) {
          // Âæ©ÂÖÉÈñãÂßã
          float restoreProgress = (timeSinceHoverEnd - delayTime) / restoreTime;
          restoreProgress = clamp(restoreProgress, 0.0, 1.0);
          
          // „Ç§„Éº„Ç∏„É≥„Ç∞Èñ¢Êï∞Ôºà„Çπ„É†„Éº„Ç∫„Å™Âæ©ÂÖÉÔºâ
          float eased = 1.0 - pow(1.0 - restoreProgress, 3.0);
          
          // „É¢„Ç∂„Ç§„ÇØÂº∑Â∫¶„ÇíÊÆµÈöéÁöÑ„Å´Âæ©ÂÖÉ
          finalIntensity = baseIntensity * (1.0 - eased);
      } else {
          // „Åæ„Å†Âæ©ÂÖÉÈñãÂßã„Åó„Å¶„ÅÑ„Å™„ÅÑÔºà„É¢„Ç∂„Ç§„ÇØ„Å™„ÅóÁä∂ÊÖã„ÇíÁ∂≠ÊåÅÔºâ
          finalIntensity = 0.0;
      }
  }
  
  gl_FragColor = mosaic(u_texture, uv, finalIntensity);
}
`;



function preload() {
  let imageUrl = getImageFromURL();
	img = loadImage(imageUrl);
	mosaicShader = new p5.Shader(this.renderer, vert, frag);	
}

function setup() {
	createCanvas(windowWidth, virtualHeight, WEBGL);
	calculateImageLayout();
}

function draw() {
  background(50);
	
	if (!img || !imageAspect) return;
  
  // „Éû„Ç¶„Çπ„Éõ„Éê„Éº„ÅÆÊ§úÂá∫
  isHovered = (mouseX > 0 && mouseX < width && mouseY > 0 && mouseY < height);
  
  // „Éõ„Éê„ÉºÁä∂ÊÖã„ÅÆÂ§âÂåñ„ÇíÊ§úÂá∫
  if (wasHovered && !isHovered) {
    // „Éõ„Éê„Éº„ÅåÁµÇ‰∫Ü„Åó„ÅüÁû¨Èñì
    hoverEndTime = millis() / 1000.0;
  } else if (!wasHovered && isHovered) {
    // „Éõ„Éê„Éº„ÅåÈñãÂßã„Åó„ÅüÁû¨ÈñìÔºàÂæ©ÂÖÉ„Ç®„Éï„Çß„ÇØ„Éà„Çí„É™„Çª„ÉÉ„ÉàÔºâ
    hoverEndTime = 0;
  }

  wasHovered = isHovered;

  // „Ç∑„Çß„Éº„ÉÄ„Éº„Çí‰ΩøÁî®
  shader(mosaicShader);
  
  // „É¶„Éã„Éï„Ç©„Éº„É†Â§âÊï∞„ÇíË®≠ÂÆö
  mosaicShader.setUniform('u_texture', img);
  mosaicShader.setUniform('u_resolution', [width, height]);
  mosaicShader.setUniform('u_isHovered', isHovered);
	mosaicShader.setUniform('u_tileY', tilesY);
  mosaicShader.setUniform('u_time', millis() / 1000.0);
  mosaicShader.setUniform('u_hoverEndTime', hoverEndTime);

  console.log('üìä Shader uniforms:', {
    isHovered,
    mouseX,
    mouseY,
    hoverEndTime,
  });

  
  noStroke();
	fill(255);
  rect(0, 0, width, height);
}

function calculateImageLayout() {
	if (!img) return;

	// ÁîªÂÉè„ÅÆ„Ç¢„Çπ„Éö„ÇØ„ÉàÊØî
	imageAspect = img.width / img.height;

	// iframe„Çµ„Ç§„Ç∫„Å´Âêà„Çè„Åõ„Å¶Ë°®Á§∫„Çµ„Ç§„Ç∫„ÇíË®àÁÆó
	displayWidth = windowWidth; // Êú¨Áï™„Åß„ÅØwindowWidth„Å´
	displayHeight = displayWidth / imageAspect;

	// Á∏¶ÊñπÂêë„Å´‰ΩïÊûö„Çø„Ç§„É´„Åô„Çã„ÅãË®àÁÆó
	tilesY = height / displayHeight;

	// ÂÆüÈöõ„ÅÆ„Ç≠„É£„É≥„Éê„ÇπÈ´ò„ÅïÔºà„Çø„Ç§„É´ÂàÜ„ÇíÂê´„ÇÄÔºâ
	actualCanvasHeight = displayHeight * tilesY;
}

function windowResized() {
	resizeCanvas(windowWidth, virtualHeight);
	calculateImageLayout(); // ÂÜçË®àÁÆó
}

// URL„Éë„É©„É°„Éº„Çø„Åã„ÇâÁîªÂÉèURL„ÇíÂèñÂæó
function getImageFromURL() {
  const params = new URLSearchParams(window.location.search);
  return params.get('image') || params.get('img') || defaultImageUrl;
}

        


